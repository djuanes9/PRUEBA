/*
Laboratorio de Inteligencia y Visión Artificial
ESCUELA POLITÉCNICA NACIONAL
Quito - Ecuador

autor: Jonathan Zea
jonathan.a.zea@ieee.org

"I find that I don't understand things unless I try to program them."
-Donald E. Knuth

04 / 10 / 2023
*/

#define REDBOARD // use it in the case of Sparkfun (red) board.
// #define WEMOS   // use it in the case of Wemos board.
#define UPPER_LIM 1500
#define LOWER_LIM -500 // to allow backwards movement at restart
#define POS_TOL 25     // maximum encoder count difference allowed at going to

#include <Adafruit_MotorShield.h>
#include "configurations.h"

#include <ESP32Encoder.h>

// /////////////////////////////////////////////////

// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
// Or, create it with a different I2C address (say for stacking)
// Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x61);

// Select which 'port' M1, M2, M3 or M4. In this case, M1
Adafruit_DCMotor *myMotor = AFMS.getMotor(2);
// You can also make another motor on port M2
// Adafruit_DCMotor *myOtherMotor = AFMS.getMotor(2);

volatile bool check_motor_danger_zone = false; // true if the motor is in the danger area
volatile bool check_motor_neg_zone = false;    // true if the motor is in the negative area
volatile bool stop_motor = false;              // true if the motor must be stopped

enum class Direction
{
  Forwarding,
  Stopped_free,
  Stopped_break,
  Backwarding
} m_dir;

// /////////////////////////////////////////////////

/// @brief Callback of the encoder interrupt
/// @param arg pointer to the encoder object
/// @return void
static IRAM_ATTR void enc_cb(void *arg);

/*/////////////////////////////////////////////////*/

/// @brief Change the speed of the motor
/// @param speed the speed of the motor
void change_speed(int16_t speed);

// /////////////////////////////////////////////////

/// @brief A delay that checks motor
/// @param ms the time to wait in milliseconds
void wait_listen_motor(uint32_t ms);

// /////////////////////////////////////////////////

// Incremental quadrature magnetic encoder
ESP32Encoder encoder(true, enc_cb);

// /////////////////////////////////////////////////
void setup()
{
  Serial.begin(115200); // set up Serial library at 9600 bps
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  if (!AFMS.begin())
  { // create with the default frequency 1.6KHz
    // if (!AFMS.begin(1000)) {  // OR with a different frequency, say 1KHz
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1)
      ;
  }
  Serial.println("Motor Shield found.");

  encoder.attachFullQuad(ENCODER_LEFT, ENCODER_RIGHT);
  encoder.setCount(0);

  change_speed(0);
}

// /////////////////////////////////////////////////
void loop()
{
  if (Serial.available() > 0)
  {
    String txt = Serial.readStringUntil('\n');
    int16_t SPEED = txt.toInt();

    Serial.print("received: ");
    Serial.print(SPEED);
    // Limits the PWM to not break the structure.
    SPEED = map(SPEED, -255, 255, -127, 127);
    Serial.print(", moving at: ");
    Serial.println(SPEED);
    change_speed(SPEED);
  }

  // -------- Potentiometers
  int force_ADC = analogRead(FSR2);

  Serial.print(force_ADC);
  Serial.print("/4095 \t");

  int32_t pos = encoder.getCount();
  Serial.print(pos);
  Serial.print(" (ENC)\t");

  int potValueP = analogRead(D2P);
  int potValueI = analogRead(D2I);
  int potValueD = analogRead(D2D);

  long valP = map(potValueP, 0, 4095, 0, 3300);
  long valI = map(potValueI, 0, 4095, 0, 3300);
  long valD = map(potValueD, 0, 4095, 0, 3300);

  Serial.print(((float)valP) / 1000);
  Serial.print("\t");
  Serial.print(((float)valI) / 1000);
  Serial.print("\t");
  Serial.println(((float)valD) / 1000);

  wait_listen_motor(100);
}

// /////////////////////////////////////////////////
void change_speed(int16_t speed)
{
  myMotor->setSpeed(abs(speed));

  if (speed < 0)
  {
    m_dir = Direction::Backwarding;
    myMotor->run(BACKWARD);
  }
  else if (speed > 0)
  {
    m_dir = Direction::Forwarding;
    myMotor->run(FORWARD);
  }
  else
  {
    m_dir = Direction::Stopped_free;
    myMotor->run(RELEASE);
  }
}

// /////////////////////////////////////////////////
void wait_listen_motor(uint32_t ms)
{
  uint32_t start = millis();
  while (millis() - start < ms)
  {

    // stopping!
    if (stop_motor)
    {
      stop_motor = false;
      change_speed(0);
      continue;
    }

    if (check_motor_neg_zone & m_dir == Direction::Backwarding)
    {
      check_motor_neg_zone = false;
      change_speed(0);
    }

    if (check_motor_danger_zone & m_dir == Direction::Forwarding)
    {
      check_motor_danger_zone = false;
      change_speed(0);
    }
  }
}

// /////////////////////////////////////////////////
static IRAM_ATTR void enc_cb(void *arg)
{
  ESP32Encoder *enc = (ESP32Encoder *)arg;

  if (enc == nullptr)
  {
    Serial.println("[ERROR]|ISR| Enc.");
    return;
  }

  check_motor_danger_zone = enc->getCount() > UPPER_LIM;
  check_motor_neg_zone = enc->getCount() < LOWER_LIM;
}

// /////////////////////////////////////////////////

/// @brief Moves the motor to a given target
/// @param target the time to wait in milliseconds
void go_to_position(int64_t target)
{
  int64_t diff = 0;

  do
  {
    diff = target - encoder.getCount();

    speed = map(diff, -2500, 2500, -100, 100);

    change_speed(speed);
  } while (abs(diff) > POS_TOL);
}
